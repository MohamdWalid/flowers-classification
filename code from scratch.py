# -*- coding: utf-8 -*-
"""Pattern Assignment-3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ik9QWJwZgTSsSXPp1vo7KCceKLgVSYWY
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

data = pd.read_csv(r'/content/Iris.csv')
print(data)

data = data.drop(columns=['Id'])
data.head()

label = ['Iris-setosa', 'Iris-versicolor', 'Iris-virginica']
colors = ['red','orange','blue']

data.corr()

for i in range(0,3):
  x = data[data['Species'] == label[i]]
  plt.scatter(x['PetalLengthCm'],x['PetalWidthCm'] , c = colors[i] , label = label[i])

plt.xlabel('PetalLengthCm')
plt.ylabel('PetalWidthCm')
plt.legend()

data = np.array(data)
np.random.shuffle(data)
print(data)

train = data[:125,:]
test = data[125:,:]

train = pd.DataFrame(train , columns=['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm','Species'])
test = pd.DataFrame(test , columns=['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm','Species'])
print(train)

data2 = train.copy()

color = ['pink','green','gray']
labels = ['Iris-setosa', 'Iris-versicolor', 'Iris-virginica']
label = ['Iris-setosa', 'Iris-virginica']
weights = []
p=0
for y in label:
  data2['Species'] = train['Species'].map(lambda x : 1 if x ==y else -1)
  x_orginal = np.array(data2.iloc[:,2:-1])
  y_orginal = np.array(data2.iloc[:,-1:])
  y_copy = y_orginal*y_orginal
  x_orginal = np.concatenate([x_orginal,y_copy] , axis = 1) # horizontal
  x_copy = x_orginal.copy()
  x_copy = x_copy*y_orginal
  x_copy = x_copy.astype('float32')
  first = np.linalg.inv(x_copy.T.dot(x_copy))
  second = x_copy.T.dot(y_copy)
  W = first.dot(second)
  weights.append(W)
  for i in np.linspace(0,7,100):
    for j in np.linspace(0,2.5,100):
     if(i*W[0]+j*W[1]+W[2]>0):
      plt.scatter(i,j,c=color[p])
      
  p+=1

  for i in range(0,3):
    x = train[train['Species'] == labels[i]]
    plt.scatter(x['PetalLengthCm'],x['PetalWidthCm'] , c = colors[i] , label = labels[i])
  
  
  plt.xlabel('PetalLengthCm')
  plt.ylabel('PetalWidthCm')
  plt.legend()

for i in np.linspace(0,7,100):
    for j in np.linspace(0,2.5,100):
     if(i*weights[0][0]+j*weights[0][1]+weights[0][2]>0 and i*weights[1][0]+j*weights[1][1]+weights[1][2]>0):
        plt.scatter(i,j,c='gray')

"""Test"""

data2 = test.copy()
x_orginal = np.array(data2.iloc[:,2:-1])
y_orginal = np.array(data2.iloc[:,-1:])
ones = np.ones((x_orginal.shape[0],1))
x_orginal = np.concatenate([x_orginal,ones] , axis = 1) # horizontal
label = []
for i in range(0,25):
  if(x_orginal[i:i+1][:].dot(weights[0])>0):
     if(x_orginal[i:i+1][:].dot(weights[1])>0):
         label.append('new_class')
     else:
         label.append('Iris-setosa')

  else:
     if(x_orginal[i:i+1][:].dot(weights[1])>0):
         label.append('Iris-virginica')
     else:
         label.append('Iris-versicolor')

print(f"accuracy of LDA from scratch: {np.round(np.sum(list((np.array(label).reshape(-1,1) == y_orginal).ravel()))/25,2)}")

from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.model_selection import train_test_split
# 2 features
LDA = LinearDiscriminantAnalysis()
LDA.fit(train.iloc[:,2:-1],train.iloc[:,-1])
print(f"accuracy of LDA of 2 features build in: {LDA.score(test.iloc[:,2:-1],test.iloc[:,-1])}")

# all features
LDA.fit(train.iloc[:,:-1],train.iloc[:,-1])
print(f"accuracy of LDA of 4 features build in: {LDA.score(test.iloc[:,:-1],test.iloc[:,-1])}")